#!/usr/bin/env python
from squadron import main,initialize,daemon
from argparse import ArgumentParser
import json
import os
import socket

if __name__ == "__main__":
    parser = ArgumentParser(
                description='Easy configuration management tool',
                epilog="http://gosquadron.com"
            )

    parser.add_argument('-i', '--directory', help='Input directory', default=os.getcwd())
    parser.add_argument('-n', '--node-name', help='Override this node\'s name')
    parser.add_argument('-s', '--skeleton', help='Init with a skeleton structure (no internet access)', action='store_true') #False by default
    parser.add_argument('-g', '--gitrepo', help='Git repo to use for INIT command')
    parser.add_argument('-t', '--status', help='Specify a status hub to register with')
    parser.add_argument('-f', '--force', help='Force a particular command to happen', action='store_true')
    parser.add_argument('command', choices=['init','check','apply', 'daemon', 'init-service'], help='Which action to execute')
    parser.add_argument('-e', '--service', help='name of service to initialize')
    parser.add_argument('-v', '--version', help='version of the service to initialize')
    parser.add_argument('-x', '--example', help='initialize with an example', action='store_true')
    parser.add_argument('-d', '--sysdir', help='Directory to store Squadron state in')
    parser.add_argument('-c', '--config', help='Override which configuration file to read')

    args = parser.parse_args()

    if(args.command == 'init-service'):
        if(args.service is None):
            print "Please specify service name"
            exit(1)
        initialize.init_service(args.directory, args.service, args.version)
        exit(0)

    if(args.command == 'init'):
        initialize.init(args.directory, args.skeleton, args.gitrepro, args.force, args.example)
        exit(0)

    if(args.command == 'daemon'):
        daemon.run(args.directory, args.gitrepro, args.hub)
        exit(0)

    print "{}: dir {} node_name {}".format(args.command, args.directory, args.node_name)

    main.go(args.directory, args.sysdir, args.config, args.node_name, args.command == 'check')
