#!/usr/bin/env python
from squadron import main,initialize,daemon,log
from argparse import ArgumentParser
import json
import os
import socket
import sys
import logging

def apply(args, parent, dry_run):
    parser = ArgumentParser(prog='{} {}'.format(parent.prog, 'check' if dry_run else 'apply'),
                description=parent.description,
                epilog=parent.epilog,
                parents=[parent])
    parser.add_argument('-i', '--directory', help='Input directory', default=os.getcwd())
    parser.add_argument('-n', '--node-name', help='Override this node\'s name')
    parser.add_argument('-t', '--status', help='Specify a status hub to register with')
    parser.add_argument('-c', '--config', help='Override which configuration file to read')
    parser.add_argument('-d', '--sysdir', help='Directory to store Squadron state in')
    parser.add_argument('-l', '--loglevel', help='What log level to run at', default='INFO')

    output = parser.parse_args(args)

    log.setup_log(output.loglevel, console=True)

    return main.go(output.directory, output.sysdir, output.config,
            output.node_name, output.status, dry_run)

def daemonize(args, parent):
    parser = ArgumentParser(prog='{} daemon',
                description=parent.description,
                epilog=parent.epilog,
                parents=[parent])
    parser.add_argument('-i', '--directory', help='Input directory', default=os.getcwd())
    parser.add_argument('-c', '--config', help='Override which configuration file to read')
    parser.add_argument('-p', '--polltime', help='How long in minutes to wait between polls')
    parser.add_argument('-r', '--repo', help='What source code repository to poll')
    parser.add_argument('-l', '--loglevel', help='What log level to run at', default='INFO')

    output = parser.parse_args(args)

    return daemon.daemonize(output.directory, output.config, output.polltime, output.repo, output.loglevel)

def init(args, parent):
    parser = ArgumentParser(prog='{} init'.format(parent.prog),
                description=parent.description,
                epilog=parent.epilog,
                parents=[parent])
    parser.add_argument('-i', '--directory', help='Input directory', default=os.getcwd())
    parser.add_argument('-e','--env', help='name of environment to initialize')
    parser.add_argument('-c','--copyfrom', help='name of environment to copy (use with -e)')
    parser.add_argument('-s', '--service', help='name of service to initialize')
    parser.add_argument('-v', '--version', help='version of the service to initialize', default='0.0.1')
    parser.add_argument('-f', '--force', help='Force initialize a non-empty directory', action='store_true')
    parser.add_argument('-g', '--gitrepo', help='Git repo to use')
    parser.add_argument('-x', '--example', help='initialize with an example', action='store_true')
    parser.add_argument('-l', '--loglevel', help='What log level to run at', default='INFO')

    output = parser.parse_args(args)

    if output.service:
        return initialize.init_service(output.directory, output.service, output.version)
    elif output.env:
        return initialize.init_environment(output.directory, output.env, output.copyfrom)
    else:
        return initialize.init(output.directory, output.gitrepo, output.force, output.example)

if __name__ == "__main__":
    parser = ArgumentParser(
                description='Easy configuration management tool',
                usage='%(prog)s [command] [options]',
                add_help=False,
                epilog="http://gosquadron.com"
            )

    command_parser = ArgumentParser(
            description = parser.description,
            epilog = parser.epilog,
            parents=[parser])
    command_parser.add_argument('command', choices=['init','check','apply','daemon','help'], help='Which action to execute')

    output = command_parser.parse_args(sys.argv[1:2])

    other_args = sys.argv[2:]

    if output.command == 'init':
        if not init(other_args, parser):
            exit(1)
    elif output.command == 'apply' or output.command =='check':
        if not apply(other_args, parser, output.command == 'check'):
            exit(1)
    elif output.command == 'daemon':
        if not daemonize(other_args, parser):
            exit(1)
    elif output.command == 'help':
        parser.print_help()
    else:
        print "Unsupported command {}".format(output.command)
        exit(1)

